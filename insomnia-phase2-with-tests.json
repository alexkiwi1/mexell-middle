{
  "_type": "export",
  "__export_format": 4,
  "__export_date": "2025-10-19T23:45:00.000Z",
  "__export_source": "insomnia.desktop.app:v2023.5.8",
  "resources": [
    {
      "_id": "wrk_frigate_phase2",
      "parentId": null,
      "modified": 1734659100000,
      "created": 1734659100000,
      "name": "Frigate Middleware API - Phase 2 Camera Monitoring",
      "description": "Complete test collection for Phase 1 & 2 endpoints with camera monitoring",
      "scope": "collection",
      "_type": "workspace"
    },
    {
      "_id": "env_development",
      "parentId": "wrk_frigate_phase2",
      "modified": 1734659100000,
      "created": 1734659100000,
      "name": "Development Environment",
      "data": {
        "base_url": "http://10.100.6.2:5002",
        "frigate_db": "10.0.20.6:5433",
        "video_server": "http://10.0.20.6:8000"
      },
      "dataPropertyOrder": {
        "&": [
          "base_url",
          "frigate_db",
          "video_server"
        ]
      },
      "color": "#7d69cb",
      "isPrivate": false,
      "metaSortKey": 1734659100000,
      "_type": "environment"
    },
    {
      "_id": "env_production",
      "parentId": "wrk_frigate_phase2",
      "modified": 1734659100000,
      "created": 1734659100000,
      "name": "Production Environment",
      "data": {
        "base_url": "http://10.100.6.2:5002",
        "frigate_db": "10.0.20.6:5433",
        "video_server": "http://10.0.20.6:8000"
      },
      "dataPropertyOrder": {
        "&": [
          "base_url",
          "frigate_db",
          "video_server"
        ]
      },
      "color": "#7d69cb",
      "isPrivate": false,
      "metaSortKey": 1734659100001,
      "_type": "environment"
    },
    {
      "_id": "fld_phase1",
      "parentId": "wrk_frigate_phase2",
      "modified": 1734659100000,
      "created": 1734659100000,
      "name": "Phase 1: Foundation & Media",
      "description": "Basic health, info, and media endpoints",
      "environment": {},
      "environmentPropertyOrder": null,
      "metaSortKey": -1734659100000,
      "_type": "request_group"
    },
    {
      "_id": "req_health_check",
      "parentId": "fld_phase1",
      "modified": 1734659100000,
      "created": 1734659100000,
      "url": "{{ _.base_url }}/v1/health",
      "name": "1.1 Health Check",
      "description": "Test PostgreSQL connection and service health",
      "method": "GET",
      "body": {},
      "parameters": [],
      "headers": [
        {
          "name": "Accept",
          "value": "application/json"
        }
      ],
      "authentication": {},
      "metaSortKey": -1734659100000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "settingFollowRedirects": "global",
      "tests": [
        {
          "id": "test_health_status",
          "name": "Health Check Status",
          "script": "// Test health check endpoint\nconst response = await insomnia.send();\n\n// Check if response is successful\nif (response.status === 200) {\n  const data = response.json;\n  \n  // Test 1: Check response structure\n  expect(data.success).toBe(true);\n  expect(data.message).toContain('healthy');\n  \n  // Test 2: Check database connection\n  expect(data.data.database.postgresql).toBe('Connected');\n  expect(data.data.database.mongodb).toBe('Connected');\n  \n  // Test 3: Check timestamp format\n  expect(data.timestamp).toMatch(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\n  \n  console.log('✅ Health check passed - All services healthy');\n} else {\n  throw new Error(`Health check failed with status ${response.status}`);\n}",
          "type": "script"
        }
      ],
      "_type": "request"
    },
    {
      "_id": "req_root_endpoint",
      "parentId": "fld_phase1",
      "modified": 1734659100000,
      "created": 1734659100000,
      "url": "{{ _.base_url }}/v1/",
      "name": "1.2 Root Endpoint",
      "description": "Get API information and metadata",
      "method": "GET",
      "body": {},
      "parameters": [],
      "headers": [
        {
          "name": "Accept",
          "value": "application/json"
        }
      ],
      "authentication": {},
      "metaSortKey": -1734659099000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "settingFollowRedirects": "global",
      "tests": [
        {
          "id": "test_root_response",
          "name": "Root Endpoint Response",
          "script": "// Test root endpoint\nconst response = await insomnia.send();\n\n// Check if response is successful\nif (response.status === 200) {\n  const data = response.json;\n  \n  // Test 1: Check response structure\n  expect(data.success).toBe(true);\n  expect(data.message).toContain('Frigate Middleware API');\n  \n  // Test 2: Check API info structure\n  expect(data.data.name).toBe('Frigate Middleware API');\n  expect(data.data.version).toBe('1.0.0');\n  expect(Array.isArray(data.data.servers)).toBe(true);\n  \n  // Test 3: Check endpoints list\n  expect(data.data.endpoints).toBeDefined();\n  expect(data.data.endpoints.health).toBe('/health');\n  expect(data.data.endpoints.cameras).toBe('/api/cameras/*');\n  \n  console.log('✅ Root endpoint passed - API info retrieved');\n} else {\n  throw new Error(`Root endpoint failed with status ${response.status}`);\n}",
          "type": "script"
        }
      ],
      "_type": "request"
    },
    {
      "_id": "req_api_info",
      "parentId": "fld_phase1",
      "modified": 1734659100000,
      "created": 1734659100000,
      "url": "{{ _.base_url }}/v1/api/info",
      "name": "1.3 API Info",
      "description": "Get detailed API configuration and features",
      "method": "GET",
      "body": {},
      "parameters": [],
      "headers": [
        {
          "name": "Accept",
          "value": "application/json"
        }
      ],
      "authentication": {},
      "metaSortKey": -1734659098000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "settingFollowRedirects": "global",
      "tests": [
        {
          "id": "test_api_info",
          "name": "API Info Response",
          "script": "// Test API info endpoint\nconst response = await insomnia.send();\n\n// Check if response is successful\nif (response.status === 200) {\n  const data = response.json;\n  \n  // Test 1: Check response structure\n  expect(data.success).toBe(true);\n  expect(data.message).toContain('API Information');\n  \n  // Test 2: Check API details\n  expect(data.data.api.name).toBe('Frigate Middleware API');\n  expect(data.data.api.version).toBe('1.0.0');\n  expect(Array.isArray(data.data.features)).toBe(true);\n  \n  // Test 3: Check database configuration\n  expect(data.data.database.frigate_postgresql.status).toBe('read-only');\n  expect(data.data.database.local_mongodb.status).toBe('read-write');\n  \n  // Test 4: Check media server URL\n  expect(data.data.media.video_server).toBe('http://10.0.20.6:8000');\n  \n  console.log('✅ API info passed - Configuration retrieved');\n} else {\n  throw new Error(`API info failed with status ${response.status}`);\n}",
          "type": "script"
        }
      ],
      "_type": "request"
    },
    {
      "_id": "req_cameras_list",
      "parentId": "fld_phase1",
      "modified": 1734659100000,
      "created": 1734659100000,
      "url": "{{ _.base_url }}/v1/api/cameras/list",
      "name": "1.4 Cameras List",
      "description": "Get list of all available cameras",
      "method": "GET",
      "body": {},
      "parameters": [],
      "headers": [
        {
          "name": "Accept",
          "value": "application/json"
        }
      ],
      "authentication": {},
      "metaSortKey": -1734659097000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "settingFollowRedirects": "global",
      "tests": [
        {
          "id": "test_cameras_list",
          "name": "Cameras List Response",
          "script": "// Test cameras list endpoint\nconst response = await insomnia.send();\n\n// Check if response is successful\nif (response.status === 200) {\n  const data = response.json;\n  \n  // Test 1: Check response structure\n  expect(data.success).toBe(true);\n  expect(data.message).toContain('Cameras retrieved successfully');\n  \n  // Test 2: Check cameras array\n  expect(Array.isArray(data.data.cameras)).toBe(true);\n  expect(data.data.cameras.length).toBeGreaterThan(0);\n  \n  // Test 3: Check expected camera names\n  const expectedCameras = ['admin_office', 'employees_01', 'employees_02', 'employees_03', 'employees_04', 'employees_05', 'employees_06', 'employees_07', 'employees_08', 'meeting_room', 'reception'];\n  const foundCameras = expectedCameras.filter(cam => data.data.cameras.includes(cam));\n  expect(foundCameras.length).toBeGreaterThan(0);\n  \n  // Test 4: Check count field\n  expect(data.data.count).toBe(data.data.cameras.length);\n  \n  console.log(`✅ Cameras list passed - Found ${data.data.cameras.length} cameras`);\n  console.log(`Cameras: ${data.data.cameras.join(', ')}`);\n} else {\n  throw new Error(`Cameras list failed with status ${response.status}`);\n}",
          "type": "script"
        }
      ],
      "_type": "request"
    },
    {
      "_id": "req_recent_recordings",
      "parentId": "fld_phase1",
      "modified": 1734659100000,
      "created": 1734659100000,
      "url": "{{ _.base_url }}/v1/api/recent-media/recordings",
      "name": "1.5 Recent Recordings",
      "description": "Get recent video recordings with streaming URLs",
      "method": "GET",
      "body": {},
      "parameters": [
        {
          "name": "limit",
          "value": "5",
          "description": "Maximum number of recordings"
        }
      ],
      "headers": [
        {
          "name": "Accept",
          "value": "application/json"
        }
      ],
      "authentication": {},
      "metaSortKey": -1734659096000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "settingFollowRedirects": "global",
      "tests": [
        {
          "id": "test_recent_recordings",
          "name": "Recent Recordings Response",
          "script": "// Test recent recordings endpoint\nconst response = await insomnia.send();\n\n// Check if response is successful\nif (response.status === 200) {\n  const data = response.json;\n  \n  // Test 1: Check response structure\n  expect(data.success).toBe(true);\n  expect(data.message).toContain('Recent recordings retrieved successfully');\n  \n  // Test 2: Check recordings array\n  expect(Array.isArray(data.data.recordings)).toBe(true);\n  \n  // Test 3: Check recording structure (if any exist)\n  if (data.data.recordings.length > 0) {\n    const recording = data.data.recordings[0];\n    expect(recording.id).toBeDefined();\n    expect(recording.camera).toBeDefined();\n    expect(recording.startTime).toBeDefined();\n    expect(recording.endTime).toBeDefined();\n    expect(recording.videoUrl).toBeDefined();\n    \n    // Test 4: Check video URL format\n    expect(recording.videoUrl).toMatch(/^http:\\/\\/10\\.0\\.20\\.6:8000\\//);\n  }\n  \n  // Test 5: Check pagination info\n  expect(data.data.pagination).toBeDefined();\n  expect(data.data.pagination.totalResults).toBe(data.data.recordings.length);\n  \n  console.log(`✅ Recent recordings passed - Found ${data.data.recordings.length} recordings`);\n} else {\n  throw new Error(`Recent recordings failed with status ${response.status}`);\n}",
          "type": "script"
        }
      ],
      "_type": "request"
    },
    {
      "_id": "req_recent_clips",
      "parentId": "fld_phase1",
      "modified": 1734659100000,
      "created": 1734659100000,
      "url": "{{ _.base_url }}/v1/api/recent-media/clips",
      "name": "1.6 Recent Clips",
      "description": "Get recent clips with thumbnail URLs",
      "method": "GET",
      "body": {},
      "parameters": [
        {
          "name": "limit",
          "value": "5",
          "description": "Maximum number of clips"
        }
      ],
      "headers": [
        {
          "name": "Accept",
          "value": "application/json"
        }
      ],
      "authentication": {},
      "metaSortKey": -1734659095000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "settingFollowRedirects": "global",
      "tests": [
        {
          "id": "test_recent_clips",
          "name": "Recent Clips Response",
          "script": "// Test recent clips endpoint\nconst response = await insomnia.send();\n\n// Check if response is successful\nif (response.status === 200) {\n  const data = response.json;\n  \n  // Test 1: Check response structure\n  expect(data.success).toBe(true);\n  expect(data.message).toContain('Recent clips retrieved successfully');\n  \n  // Test 2: Check clips array\n  expect(Array.isArray(data.data.clips)).toBe(true);\n  \n  // Test 3: Check clip structure (if any exist)\n  if (data.data.clips.length > 0) {\n    const clip = data.data.clips[0];\n    expect(clip.id).toBeDefined();\n    expect(clip.camera).toBeDefined();\n    expect(clip.startTime).toBeDefined();\n    expect(clip.label).toBeDefined();\n    \n    // Test 4: Check thumbnail URL format (if exists)\n    if (clip.thumbnailUrl) {\n      expect(clip.thumbnailUrl).toMatch(/^http:\\/\\/10\\.0\\.20\\.6:8000\\//);\n    }\n  }\n  \n  // Test 5: Check pagination info\n  expect(data.data.pagination).toBeDefined();\n  expect(data.data.pagination.totalResults).toBe(data.data.clips.length);\n  \n  console.log(`✅ Recent clips passed - Found ${data.data.clips.length} clips`);\n} else {\n  throw new Error(`Recent clips failed with status ${response.status}`);\n}",
          "type": "script"
        }
      ],
      "_type": "request"
    },
    {
      "_id": "fld_phase2",
      "parentId": "wrk_frigate_phase2",
      "modified": 1734659100000,
      "created": 1734659100000,
      "name": "Phase 2: Camera Monitoring",
      "description": "Camera monitoring and analytics endpoints",
      "environment": {},
      "environmentPropertyOrder": null,
      "metaSortKey": -1734659094000,
      "_type": "request_group"
    },
    {
      "_id": "req_camera_summary_all",
      "parentId": "fld_phase2",
      "modified": 1734659100000,
      "created": 1734659100000,
      "url": "{{ _.base_url }}/v1/api/cameras/summary",
      "name": "2.1 Camera Summary (All)",
      "description": "Get live summaries for all cameras",
      "method": "GET",
      "body": {},
      "parameters": [
        {
          "name": "hours",
          "value": "24",
          "description": "Hours to look back for activity"
        }
      ],
      "headers": [
        {
          "name": "Accept",
          "value": "application/json"
        }
      ],
      "authentication": {},
      "metaSortKey": -1734659094000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "settingFollowRedirects": "global",
      "tests": [
        {
          "id": "test_camera_summary_all",
          "name": "Camera Summary All Response",
          "script": "// Test camera summary all endpoint\nconst response = await insomnia.send();\n\n// Check if response is successful\nif (response.status === 200) {\n  const data = response.json;\n  \n  // Test 1: Check response structure\n  expect(data.success).toBe(true);\n  expect(data.message).toContain('Camera summaries retrieved successfully');\n  \n  // Test 2: Check summaries array\n  expect(Array.isArray(data.data.summaries)).toBe(true);\n  \n  // Test 3: Check summary structure (if any exist)\n  if (data.data.summaries.length > 0) {\n    const summary = data.data.summaries[0];\n    expect(summary.camera).toBeDefined();\n    expect(summary.status).toBeDefined();\n    expect(summary.detections).toBeDefined();\n    expect(summary.activityLevel).toBeDefined();\n    \n    // Test 4: Check detections structure\n    expect(summary.detections.person).toBeDefined();\n    expect(summary.detections.cellPhone).toBeDefined();\n    expect(summary.detections.other).toBeDefined();\n    expect(summary.detections.total).toBeDefined();\n  }\n  \n  // Test 5: Check count and filters\n  expect(data.data.count).toBe(data.data.summaries.length);\n  expect(data.data.filters.hours).toBe(24);\n  \n  console.log(`✅ Camera summary all passed - Found ${data.data.summaries.length} camera summaries`);\n} else {\n  throw new Error(`Camera summary all failed with status ${response.status}`);\n}",
          "type": "script"
        }
      ],
      "_type": "request"
    },
    {
      "_id": "req_camera_summary_specific",
      "parentId": "fld_phase2",
      "modified": 1734659100000,
      "created": 1734659100000,
      "url": "{{ _.base_url }}/v1/api/cameras/employees_01/summary",
      "name": "2.2 Camera Summary (Specific)",
      "description": "Get detailed summary for specific camera",
      "method": "GET",
      "body": {},
      "parameters": [
        {
          "name": "hours",
          "value": "24",
          "description": "Hours to look back for activity"
        }
      ],
      "headers": [
        {
          "name": "Accept",
          "value": "application/json"
        }
      ],
      "authentication": {},
      "metaSortKey": -1734659093000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "settingFollowRedirects": "global",
      "tests": [
        {
          "id": "test_camera_summary_specific",
          "name": "Camera Summary Specific Response",
          "script": "// Test camera summary specific endpoint\nconst response = await insomnia.send();\n\n// Check if response is successful\nif (response.status === 200) {\n  const data = response.json;\n  \n  // Test 1: Check response structure\n  expect(data.success).toBe(true);\n  expect(data.message).toContain('Camera summary for employees_01 retrieved successfully');\n  \n  // Test 2: Check camera data\n  expect(data.data.camera).toBe('employees_01');\n  expect(data.data.status).toBeDefined();\n  expect(data.data.timeRange).toBeDefined();\n  \n  // Test 3: Check time range structure\n  expect(data.data.timeRange.hours).toBe(24);\n  expect(data.data.timeRange.startTime).toBeDefined();\n  expect(data.data.timeRange.endTime).toBeDefined();\n  \n  // Test 4: Check recordings structure\n  expect(data.data.recordings).toBeDefined();\n  expect(data.data.recordings.total).toBeDefined();\n  expect(data.data.recordings.totalDuration).toBeDefined();\n  \n  // Test 5: Check detections structure\n  expect(data.data.detections).toBeDefined();\n  expect(data.data.detections.total).toBeDefined();\n  expect(data.data.detections.person).toBeDefined();\n  expect(data.data.detections.cellPhone).toBeDefined();\n  \n  // Test 6: Check recent clips array\n  expect(Array.isArray(data.data.recentClips)).toBe(true);\n  \n  console.log(`✅ Camera summary specific passed - Camera: ${data.data.camera}, Status: ${data.data.status}`);\n} else {\n  throw new Error(`Camera summary specific failed with status ${response.status}`);\n}",
          "type": "script"
        }
      ],
      "_type": "request"
    },
    {
      "_id": "req_camera_activity",
      "parentId": "fld_phase2",
      "modified": 1734659100000,
      "created": 1734659100000,
      "url": "{{ _.base_url }}/v1/api/cameras/employees_01/activity",
      "name": "2.3 Camera Activity Feed",
      "description": "Get activity feed for specific camera",
      "method": "GET",
      "body": {},
      "parameters": [
        {
          "name": "hours",
          "value": "1",
          "description": "Hours to look back for activity"
        },
        {
          "name": "limit",
          "value": "10",
          "description": "Maximum number of activities"
        }
      ],
      "headers": [
        {
          "name": "Accept",
          "value": "application/json"
        }
      ],
      "authentication": {},
      "metaSortKey": -1734659092000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "settingFollowRedirects": "global",
      "tests": [
        {
          "id": "test_camera_activity",
          "name": "Camera Activity Response",
          "script": "// Test camera activity endpoint\nconst response = await insomnia.send();\n\n// Check if response is successful\nif (response.status === 200) {\n  const data = response.json;\n  \n  // Test 1: Check response structure\n  expect(data.success).toBe(true);\n  expect(data.message).toContain('Camera activity for employees_01 retrieved successfully');\n  \n  // Test 2: Check activities array\n  expect(Array.isArray(data.data.activities)).toBe(true);\n  \n  // Test 3: Check activity structure (if any exist)\n  if (data.data.activities.length > 0) {\n    const activity = data.data.activities[0];\n    expect(activity.timestamp).toBeDefined();\n    expect(activity.label).toBeDefined();\n    expect(activity.camera).toBe('employees_01');\n    \n    // Test 4: Check timestamp format\n    expect(activity.timestamp).toMatch(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\n  }\n  \n  // Test 5: Check count and filters\n  expect(data.data.count).toBe(data.data.activities.length);\n  expect(data.data.camera).toBe('employees_01');\n  expect(data.data.filters.hours).toBe(1);\n  expect(data.data.filters.limit).toBe(10);\n  \n  console.log(`✅ Camera activity passed - Found ${data.data.activities.length} activities`);\n} else {\n  throw new Error(`Camera activity failed with status ${response.status}`);\n}",
          "type": "script"
        }
      ],
      "_type": "request"
    },
    {
      "_id": "req_camera_status",
      "parentId": "fld_phase2",
      "modified": 1734659100000,
      "created": 1734659100000,
      "url": "{{ _.base_url }}/v1/api/cameras/employees_01/status",
      "name": "2.4 Camera Status",
      "description": "Get detailed camera status and health metrics",
      "method": "GET",
      "body": {},
      "parameters": [],
      "headers": [
        {
          "name": "Accept",
          "value": "application/json"
        }
      ],
      "authentication": {},
      "metaSortKey": -1734659091000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "settingFollowRedirects": "global",
      "tests": [
        {
          "id": "test_camera_status",
          "name": "Camera Status Response",
          "script": "// Test camera status endpoint\nconst response = await insomnia.send();\n\n// Check if response is successful\nif (response.status === 200) {\n  const data = response.json;\n  \n  // Test 1: Check response structure\n  expect(data.success).toBe(true);\n  expect(data.message).toContain('Camera status for employees_01 retrieved successfully');\n  \n  // Test 2: Check camera data\n  expect(data.data.camera).toBe('employees_01');\n  expect(data.data.status).toBeDefined();\n  expect(data.data.health).toBeDefined();\n  \n  // Test 3: Check health structure\n  expect(data.data.health.hasRecentActivity).toBeDefined();\n  expect(data.data.health.hasRecentRecordings).toBeDefined();\n  expect(typeof data.data.health.hasRecentActivity).toBe('boolean');\n  expect(typeof data.data.health.hasRecentRecordings).toBe('boolean');\n  \n  // Test 4: Check metrics structure\n  expect(data.data.metrics).toBeDefined();\n  expect(data.data.metrics.recentDetections).toBeDefined();\n  expect(data.data.metrics.recentRecordings).toBeDefined();\n  expect(Array.isArray(data.data.metrics.hourlyActivity)).toBe(true);\n  \n  // Test 5: Check timestamp format\n  expect(data.data.timestamp).toMatch(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\n  \n  console.log(`✅ Camera status passed - Camera: ${data.data.camera}, Status: ${data.data.status}`);\n} else {\n  throw new Error(`Camera status failed with status ${response.status}`);\n}",
          "type": "script"
        }
      ],
      "_type": "request"
    },
    {
      "_id": "req_camera_violations",
      "parentId": "fld_phase2",
      "modified": 1734659100000,
      "created": 1734659100000,
      "url": "{{ _.base_url }}/v1/api/cameras/employees_01/violations",
      "name": "2.5 Camera Violations",
      "description": "Get camera-specific violations (cell phone detections)",
      "method": "GET",
      "body": {},
      "parameters": [
        {
          "name": "hours",
          "value": "24",
          "description": "Hours to look back for violations"
        },
        {
          "name": "limit",
          "value": "10",
          "description": "Maximum number of violations"
        }
      ],
      "headers": [
        {
          "name": "Accept",
          "value": "application/json"
        }
      ],
      "authentication": {},
      "metaSortKey": -1734659090000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "settingFollowRedirects": "global",
      "tests": [
        {
          "id": "test_camera_violations",
          "name": "Camera Violations Response",
          "script": "// Test camera violations endpoint\nconst response = await insomnia.send();\n\n// Check if response is successful\nif (response.status === 200) {\n  const data = response.json;\n  \n  // Test 1: Check response structure\n  expect(data.success).toBe(true);\n  expect(data.message).toContain('Camera violations for employees_01 retrieved successfully');\n  \n  // Test 2: Check violations array\n  expect(Array.isArray(data.data.violations)).toBe(true);\n  \n  // Test 3: Check violation structure (if any exist)\n  if (data.data.violations.length > 0) {\n    const violation = data.data.violations[0];\n    expect(violation.timestamp).toBeDefined();\n    expect(violation.camera).toBe('employees_01');\n    expect(violation.type).toBe('cell_phone');\n    \n    // Test 4: Check timestamp format\n    expect(violation.timestamp).toMatch(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\n  }\n  \n  // Test 5: Check count and filters\n  expect(data.data.count).toBe(data.data.violations.length);\n  expect(data.data.camera).toBe('employees_01');\n  expect(data.data.filters.hours).toBe(24);\n  expect(data.data.filters.limit).toBe(10);\n  \n  console.log(`✅ Camera violations passed - Found ${data.data.violations.length} violations`);\n} else {\n  throw new Error(`Camera violations failed with status ${response.status}`);\n}",
          "type": "script"
        }
      ],
      "_type": "request"
    },
    {
      "_id": "req_camera_cache_clear",
      "parentId": "fld_phase2",
      "modified": 1734659100000,
      "created": 1734659100000,
      "url": "{{ _.base_url }}/v1/api/cameras/cache",
      "name": "2.6 Clear Camera Cache",
      "description": "Clear camera cache (placeholder for future implementation)",
      "method": "DELETE",
      "body": {},
      "parameters": [],
      "headers": [
        {
          "name": "Accept",
          "value": "application/json"
        }
      ],
      "authentication": {},
      "metaSortKey": -1734659089000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "settingFollowRedirects": "global",
      "tests": [
        {
          "id": "test_camera_cache_clear",
          "name": "Clear Camera Cache Response",
          "script": "// Test clear camera cache endpoint\nconst response = await insomnia.send();\n\n// Check if response is successful\nif (response.status === 200) {\n  const data = response.json;\n  \n  // Test 1: Check response structure\n  expect(data.success).toBe(true);\n  expect(data.message).toContain('Camera cache cleared successfully');\n  \n  // Test 2: Check data structure\n  expect(data.data.cleared).toBe(true);\n  expect(data.data.timestamp).toBeDefined();\n  \n  // Test 3: Check timestamp format\n  expect(data.data.timestamp).toMatch(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\n  \n  console.log('✅ Clear camera cache passed - Cache cleared successfully');\n} else {\n  throw new Error(`Clear camera cache failed with status ${response.status}`);\n}",
          "type": "script"
        }
      ],
      "_type": "request"
    },
    {
      "_id": "fld_media_tests",
      "parentId": "wrk_frigate_phase2",
      "modified": 1734659100000,
      "created": 1734659100000,
      "name": "Media & Proxy Tests",
      "description": "Media file serving and proxy tests",
      "environment": {},
      "environmentPropertyOrder": null,
      "metaSortKey": -1734659088000,
      "_type": "request_group"
    },
    {
      "_id": "req_test_media",
      "parentId": "fld_media_tests",
      "modified": 1734659100000,
      "created": 1734659100000,
      "url": "{{ _.base_url }}/v1/api/recent-media/test-media",
      "name": "3.1 Test Media URLs",
      "description": "Test media URL accessibility",
      "method": "GET",
      "body": {},
      "parameters": [],
      "headers": [
        {
          "name": "Accept",
          "value": "application/json"
        }
      ],
      "authentication": {},
      "metaSortKey": -1734659088000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "settingFollowRedirects": "global",
      "tests": [
        {
          "id": "test_media_urls",
          "name": "Test Media URLs Response",
          "script": "// Test media URLs endpoint\nconst response = await insomnia.send();\n\n// Check if response is successful\nif (response.status === 200) {\n  const data = response.json;\n  \n  // Test 1: Check response structure\n  expect(data.success).toBe(true);\n  expect(data.message).toContain('Media URL test completed');\n  \n  // Test 2: Check video server URL\n  expect(data.data.video_server_url).toBe('http://10.0.20.6:8000');\n  \n  // Test 3: Check tests array\n  expect(Array.isArray(data.data.tests)).toBe(true);\n  \n  // Test 4: Check test structure (if any exist)\n  if (data.data.tests.length > 0) {\n    const test = data.data.tests[0];\n    expect(test.type).toBeDefined();\n    expect(test.status).toBeDefined();\n    \n    // Test 5: Check URL format\n    if (test.thumbnail_url) {\n      expect(test.thumbnail_url).toMatch(/^http:\\/\\/10\\.0\\.20\\.6:8000\\//);\n    }\n    if (test.video_url) {\n      expect(test.video_url).toMatch(/^http:\\/\\/10\\.0\\.20\\.6:8000\\//);\n    }\n  }\n  \n  console.log(`✅ Test media URLs passed - Found ${data.data.tests.length} test results`);\n} else {\n  throw new Error(`Test media URLs failed with status ${response.status}`);\n}",
          "type": "script"
        }
      ],
      "_type": "request"
    },
    {
      "_id": "req_media_proxy_video",
      "parentId": "fld_media_tests",
      "modified": 1734659100000,
      "created": 1734659100000,
      "url": "{{ _.base_url }}/media/recordings/2025-10-19/23/employees_02/18.19.mp4",
      "name": "3.2 Video Stream Test",
      "description": "Test video streaming through media proxy",
      "method": "GET",
      "body": {},
      "parameters": [],
      "headers": [
        {
          "name": "Accept",
          "value": "video/mp4, video/*, */*"
        },
        {
          "name": "Range",
          "value": "bytes=0-1023",
          "description": "Test range requests for video streaming"
        }
      ],
      "authentication": {},
      "metaSortKey": -1734659087000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "settingFollowRedirects": "global",
      "tests": [
        {
          "id": "test_video_stream",
          "name": "Video Stream Test",
          "script": "// Test video stream endpoint\nconst response = await insomnia.send();\n\n// Check if response is successful\nif (response.status === 200) {\n  // Test 1: Check content type\n  const contentType = response.headers['content-type'] || response.headers['Content-Type'];\n  expect(contentType).toContain('video/mp4');\n  \n  // Test 2: Check content length\n  const contentLength = response.headers['content-length'] || response.headers['Content-Length'];\n  if (contentLength) {\n    expect(parseInt(contentLength)).toBeGreaterThan(0);\n  }\n  \n  // Test 3: Check accept ranges header\n  const acceptRanges = response.headers['accept-ranges'] || response.headers['Accept-Ranges'];\n  expect(acceptRanges).toBe('bytes');\n  \n  console.log('✅ Video stream test passed - Video file accessible');\n} else if (response.status === 206) {\n  // Partial content is also acceptable for range requests\n  console.log('✅ Video stream test passed - Partial content (range request)');\n} else {\n  throw new Error(`Video stream test failed with status ${response.status}`);\n}",
          "type": "script"
        }
      ],
      "_type": "request"
    },
    {
      "_id": "req_media_proxy_thumbnail",
      "parentId": "fld_media_tests",
      "modified": 1734659100000,
      "created": 1734659100000,
      "url": "{{ _.base_url }}/media/clips/review/thumb-employees_04-1760915764.052192-k1dp3s.webp",
      "name": "3.3 Thumbnail Image Test",
      "description": "Test thumbnail image through media proxy",
      "method": "GET",
      "body": {},
      "parameters": [],
      "headers": [
        {
          "name": "Accept",
          "value": "image/webp, image/*, */*"
        }
      ],
      "authentication": {},
      "metaSortKey": -1734659086000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "settingFollowRedirects": "global",
      "tests": [
        {
          "id": "test_thumbnail_image",
          "name": "Thumbnail Image Test",
          "script": "// Test thumbnail image endpoint\nconst response = await insomnia.send();\n\n// Check if response is successful\nif (response.status === 200) {\n  // Test 1: Check content type\n  const contentType = response.headers['content-type'] || response.headers['Content-Type'];\n  expect(contentType).toContain('image/webp');\n  \n  // Test 2: Check content length\n  const contentLength = response.headers['content-length'] || response.headers['Content-Length'];\n  if (contentLength) {\n    expect(parseInt(contentLength)).toBeGreaterThan(0);\n  }\n  \n  console.log('✅ Thumbnail image test passed - Image file accessible');\n} else {\n  throw new Error(`Thumbnail image test failed with status ${response.status}`);\n}",
          "type": "script"
        }
      ],
      "_type": "request"
    },
    {
      "_id": "fld_automated_tests",
      "parentId": "wrk_frigate_phase2",
      "modified": 1734659100000,
      "created": 1734659100000,
      "name": "4. Automated Test Suite",
      "description": "Run all tests automatically",
      "environment": {},
      "environmentPropertyOrder": null,
      "metaSortKey": -1734659085000,
      "_type": "request_group"
    },
    {
      "_id": "req_run_all_tests",
      "parentId": "fld_automated_tests",
      "modified": 1734659100000,
      "created": 1734659100000,
      "url": "{{ _.base_url }}/v1/health",
      "name": "4.1 Run All Tests",
      "description": "Execute all Phase 1 & 2 tests in sequence",
      "method": "GET",
      "body": {},
      "parameters": [],
      "headers": [
        {
          "name": "Accept",
          "value": "application/json"
        }
      ],
      "authentication": {},
      "metaSortKey": -1734659085000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "settingFollowRedirects": "global",
      "tests": [
        {
          "id": "test_all_tests_summary",
          "name": "All Tests Summary",
          "script": "// Test all endpoints summary\nconst response = await insomnia.send();\n\n// Check if response is successful\nif (response.status === 200) {\n  const data = response.json;\n  \n  // Test 1: Check basic health\n  expect(data.success).toBe(true);\n  expect(data.data.status).toBe('healthy');\n  \n  // Test 2: Check database connections\n  expect(data.data.database.postgresql).toBe('Connected');\n  expect(data.data.database.mongodb).toBe('Connected');\n  \n  console.log('✅ All tests summary - System is healthy and ready for testing');\n  console.log('📋 Test Checklist:');\n  console.log('  Phase 1: Foundation & Media (6 endpoints)');\n  console.log('  Phase 2: Camera Monitoring (6 endpoints)');\n  console.log('  Media Tests: Proxy & Streaming (3 endpoints)');\n  console.log('  Total: 15 endpoints ready for testing');\n  console.log('');\n  console.log('🎯 Next Steps:');\n  console.log('  1. Run individual endpoint tests');\n  console.log('  2. Check test results in Insomnia');\n  console.log('  3. Verify all endpoints return real data');\n  console.log('  4. Proceed to Phase 3 when ready');\n} else {\n  throw new Error(`All tests summary failed with status ${response.status}`);\n}",
          "type": "script"
        }
      ],
      "_type": "request"
    }
  ]
}

